# dbrrg filesystem mounting			-*- shell-script -*-

ramroot_is_remote()
{
	case "$1" in
		http://*|https://*|ftp://*)
			true;;
		*)
			false;;
	esac
}

ramroot_is_xzipped()
{
	case "$1" in
		*.xz)
			true;;
		*)
			false;;
	esac
}

ramroot_mount()
{
	local ramroot="$1"
	local memtotal=$(awk '/^MemTotal:/{print $2"k"}' /proc/meminfo)
    set -x
	# Mount a ramdisk to extract the tar image on
	if mount -t tmpfs -o size=${memtotal:-500M} tmpfs ${rootmnt} ; then
		:
	elif mount -t shm shm ${rootmnt} ; then
		:
	else
		mount -t ramfs ramfs ${rootmnt}
	fi
    # give the system a littel bit of time to detect usb sticks
    sleep 2
	# Download and extract ramdisk tar image
	if ramroot_is_remote "$ramroot"; then
		curl "$ramroot"
	elif [ -b /dev/disk/by-partlabel/EFI-SYSTEM ]; then
 		mkdir /mnt
		mount /dev/disk/by-partlabel/EFI-SYSTEM /mnt
		cat "/mnt/$ramroot"
		umount /mnt
	else
		cat "$ramroot"	
	fi | if ramroot_is_xzipped "$ramroot"; then
		pixz -d -t
	else
		cat
	fi | ( cd ${rootmnt} && tar -x ) || panic 'Unable to extract root filesystem'
}

mountroot()
{
	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/dbrrg-top"
	run_scripts /scripts/dbrrg-top
	[ "$quiet" != "y" ] && log_end_msg

	# Parse command line options to get ramroot
	local ramroot
	for x in $(cat /proc/cmdline); do
		case "$x" in
		ramroot=*)
			ramroot="${x#ramroot=}"
			;;
		esac
	done
	if [ -z "$ramroot" ] && [ -e /ramroot.xz ]; then
		ramroot=/ramroot.xz
	fi
	if [ -z "$ramroot" ]; then
		panic "No tar image for root found. Try passing ramroot= bootarg."
	fi

	# Configure networking if necessary
	if ramroot_is_remote "$ramroot"; then
		[ "$quiet" != "y" ] && log_begin_msg "Configuring networking for RamRoot"
		modprobe af_packet
		wait_for_udev 10
	        # the empty '' is important to use any interface found
        	ipconfig -c dhcp '' | sed -nr 's/.+dns0 +: +([^ ]+).+/nameserver \1/p'> /etc/resolv.conf
		[ "$quiet" != "y" ] && log_end_msg
	fi

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/dbrrg-premount"
	run_scripts /scripts/dbrrg-premount
	[ "$quiet" != "y" ] && log_end_msg

	[ "$quiet" != "y" ] && log_begin_msg "Installing root filesystem"
	ramroot_mount "$ramroot"

    # copy the kernel modules to the new root
    mkdir -p ${rootmnt}/lib/modules
    cp -rp /lib/modules/* ${rootmnt}/lib/modules

	[ "$quiet" != "y" ] && log_end_msg

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/dbrrg-bottom"
	run_scripts /scripts/dbrrg-bottom
	[ "$quiet" != "y" ] && log_end_msg
}
